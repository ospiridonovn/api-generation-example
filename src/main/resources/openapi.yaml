openapi: 3.0.3
info:
  version: 1.0.0
  title: Api Generation Example
servers:
  - url: http://localhost:8080
    description: Api Generation Example Http Server
paths:
  /books/{id}:
    get:
      summary: Find book by ID
      operationId: getOneBook
      parameters:
        - name: id
          in: path
          description: ID of book
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        200:
          description: Succesful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/ApiValidationError'
        500:
          $ref: '#/components/responses/ApiUnexpectedError'
    put:
      summary: Update book by ID
      operationId: updateBook
      parameters:
        - name: id
          in: path
          description: ID of book
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: Succesful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/ApiValidationError'
        500:
          $ref: '#/components/responses/ApiUnexpectedError'
    delete:
      summary: Delete book by ID
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          description: ID of book
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        204:
          description: Succesful request
        400:
          $ref: '#/components/responses/ApiValidationError'
        500:
          $ref: '#/components/responses/ApiUnexpectedError'
  /books/:
    get:
      summary: Find all books
      operationId: getAllBooks
      responses:
        200:
          description: Succesful request
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        500:
          $ref: '#/components/responses/ApiUnexpectedError'
    post:
      summary: Add new book
      operationId: createNewBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
      responses:
        200:
          description: Succesful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          $ref: '#/components/responses/ApiValidationError'
        500:
          $ref: '#/components/responses/ApiUnexpectedError'
components:
  responses:
    ApiUnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
    ApiValidationError:
      description: Validation error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ApiError'
  schemas:
    Book:
      type: object
      required:
        - title
        - type
        - createdAt
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: object
          properties:
            name:
              type: string
              minLength: 3
        bestseller:
          type: boolean
        type:
          type: string
          enum:
            - CLASSICS
            - HISTORY
            - FANTASY
        createdAt:
          type: string
          format: date-time
    ApiError:
      type: object
      properties:
        status:
          type: string
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        validationErrors:
          type: array
          items:
            $ref: '#/components/schemas/ApiValidationError'
    ApiValidationError:
      type: object
      properties:
        objectName:
          type: string
        field:
          type: string
        rejectedValue:
          type: object
        message:
          type: string